#!/usr/bin/env python3

class ScriptGenerator:
    def __init__(self, container_type, container_path, levels):
        self.container_type = container_type  # 'file', 'device', or 'prompt'
        self.container_path = container_path
        self.levels = levels
        self.mapper_prefix = "abysscrypt"
    
    def generate_mount_script(self):
        """Generate a script to mount the multi-level encryption"""
        script = []
        script.append("#!/bin/bash")
        script.append("\n# AbyssCrypt Mount Script - Generated by AbyssCrypt\n")
        
        # Add error handling
        script.append("set -e")
        script.append("function cleanup {")
        script.append("    echo 'Error occurred. Cleaning up...'")
        script.append("    for ((i=${#MOUNTED_LEVELS[@]}-1; i>=0; i--)); do")
        script.append("        cryptsetup close \"${MOUNTED_LEVELS[$i]}\" 2>/dev/null || true")
        script.append("    done")
        script.append("}")
        script.append("trap cleanup ERR\n")
        script.append("MOUNTED_LEVELS=()")
        
        # Container prompt
        script.append("\n# Get container information")
        script.append('echo "Enter path to container file or device:"')
        script.append('read -r CONTAINER_PATH')
        
        # Check if path exists and create file if needed
        script.append('if [ ! -e "$CONTAINER_PATH" ]; then')
        script.append('    # Path does not exist')
        script.append('    echo "Path $CONTAINER_PATH does not exist."')
        script.append('    if [[ "$CONTAINER_PATH" != "/dev/"* ]]; then')
        script.append('        # Not a device path, assume it\'s a file')
        script.append('        echo "Would you like to create a container file at this path? (y/n)"')
        script.append('        read -r CREATE_FILE')
        script.append('        if [[ "$CREATE_FILE" =~ ^[Yy] ]]; then')
        script.append('            DIR_PATH=$(dirname "$CONTAINER_PATH")')
        script.append('            if [ ! -d "$DIR_PATH" ]; then')
        script.append('                echo "Creating directory $DIR_PATH..."')
        script.append('                mkdir -p "$DIR_PATH"')
        script.append('            fi')
        script.append('            echo "Enter size in MB:"')
        script.append('            read -r SIZE_MB')
        script.append('            echo "Creating file of ${SIZE_MB}MB. This may take a while..."')
        script.append('            dd if=/dev/zero of="$CONTAINER_PATH" bs=1M count="$SIZE_MB" status=progress')
        script.append('            echo "File created successfully."')
        script.append('        else')
        script.append('            echo "Operation cancelled."')
        script.append('            exit 1')
        script.append('        fi')
        script.append('    else')
        script.append('        echo "Device path does not exist. Please check the device name and try again."')
        script.append('        exit 1')
        script.append('    fi')
        script.append('elif [ -d "$CONTAINER_PATH" ]; then')
        script.append('    echo "Error: $CONTAINER_PATH is a directory. Please specify a file or device path."')
        script.append('    exit 1')
        script.append('fi\n')
        
        # Mount point
        script.append("# Define mount point")
        script.append("MOUNT_POINT=\"$1\"")
        script.append("if [ -z \"$MOUNT_POINT\" ]; then")
        script.append("    echo 'Usage: please specify <mount_point>'")
        script.append("    exit 1")
        script.append("fi\n")
        script.append("mkdir -p \"$MOUNT_POINT\"")
        
        # Set up each level
        script.append(f"\n# Setting up {len(self.levels)} levels of encryption")
        
        for i, level in enumerate(self.levels):
            level_num = level.level_num
            mapper_name = f"{self.mapper_prefix}_{level_num}"
            
            script.append(f"\n# Level {level_num} encryption setup")
            
            # For level 1, source is the container provided at runtime
            if i == 0:
                source = "$CONTAINER_PATH"
                # Add offset for level 1 if specified
                if level.offset > 0:
                    script.append(f"# Using offset {level.offset} sectors for level {level_num}")
                    source = f"{source} --offset {level.offset}"
            else:
                source = f"/dev/mapper/{self.mapper_prefix}_{level_num-1}"
                if level.offset > 0:
                    script.append(f"# Using offset {level.offset} sectors for level {level_num}")
                    source = f"{source} --offset {level.offset}"
            
            # Auth method
            if level.use_passphrase:
                script.append(f"echo 'Enter passphrase for Level {level_num}:'")
                auth_method = "--key-file=-"
                script.append("read -s PASSPHRASE")
                script.append(f"echo \"$PASSPHRASE\" | cryptsetup open {source} {mapper_name} --type plain --cipher {level.cipher} --key-size {level.key_size} --hash {level.hash_type} {auth_method}")
                script.append("unset PASSPHRASE")
            else:
                auth_method = f"--key-file=\"{level.keyfile_path}\""
                script.append(f"cryptsetup open {source} {mapper_name} --type plain --cipher {level.cipher} --key-size {level.key_size} --hash {level.hash_type} {auth_method}")
                
            script.append(f"MOUNTED_LEVELS+=('{mapper_name}')")
        
        # Final mapper device
        final_mapper = f"/dev/mapper/{self.mapper_prefix}_{self.levels[-1].level_num}"
        
        # Check if the device needs formatting and offer to create a filesystem
        script.append("\n# Check if filesystem exists on the final device")
        script.append(f"if ! blkid {final_mapper} > /dev/null 2>&1; then")
        script.append("    echo 'No filesystem detected on the encrypted device.'")
        script.append("    echo 'Would you like to create an ext4 filesystem? (y/n)'")
        script.append("    read -r CREATE_FS")
        script.append("    if [[ \"$CREATE_FS\" =~ ^[Yy] ]]; then")
        script.append(f"        echo 'Creating ext4 filesystem on {final_mapper}...'")
        script.append(f"        mkfs.ext4 -m 0 {final_mapper}")
        script.append("        echo 'Filesystem created.'")
        script.append("    else")
        script.append("        echo 'Warning: No filesystem present. Mount may fail.'")
        script.append("    fi")
        script.append("fi")
        
        # Final mount command
        script.append("\n# Mount the final encrypted volume")
        script.append(f"mount {final_mapper} \"$MOUNT_POINT\"")
        script.append("\necho 'Multi-level encryption setup complete!'")
        script.append(f"echo \"Mounted at $MOUNT_POINT\"")

        return "\n".join(script)
    
    def generate_unmount_script(self):
        """Generate a script to unmount the multi-level encryption"""
        script = []
        script.append("#!/bin/bash")
        script.append("\n# AbyssCrypt Unmount Script - Generated by AbyssCrypt\n")
        
        # Add error handling
        script.append("set -e")
        
        # Mount point
        script.append("# Define mount point")
        script.append("MOUNT_POINT=\"$1\"")
        script.append("if [ -z \"$MOUNT_POINT\" ]; then")
        script.append("    echo 'Usage: please specify <mount_point>'")
        script.append("    exit 1")
        script.append("fi\n")
        
        script.append("# Unmount the filesystem")
        script.append("echo 'Unmounting encrypted filesystem...'")
        script.append("umount \"$MOUNT_POINT\"")
        
        # Close each level in reverse order
        for level in reversed(self.levels):
            level_num = level.level_num
            mapper_name = f"{self.mapper_prefix}_{level_num}"
            script.append(f"\n# Closing Level {level_num}")
            script.append(f"cryptsetup close {mapper_name}")
        
        script.append("\necho 'Multi-level encryption teardown complete!'")
        
        return "\n".join(script)
